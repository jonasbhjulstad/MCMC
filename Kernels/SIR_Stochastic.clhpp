#ifndef SIR_MODEL_H
#define SIR_MODEL_H
#include <PRNG_Distributions.clhpp>
#include <PRNG_Sampling.clhpp>
#include "SMC_Particle.clhpp"
#include "SMC_Model.clhpp"

template <size_t N_observations>
class SIR_Model: public SMC::Model<SIR_Model<N_observations>>
{
private: 
    float ll_sigma;
    float prop_sigma[2];
    float y[N_observations];
    static constexpr size_t Nx = 3;
    float x0[Nx];
    long N_iterations;
    float dt;
    float N_pop;
    float nu_I;
    float nu_R;
    bool is_dispersed;

public:
    SIR_Model(long N_iterations, 
    constant float *y_obs, 
    constant float *x_init, 
    float dt, 
    float N_pop,  
    constant float* prop_std, 
    float ll_std,
    float nu_I_init, 
    float nu_R_init)
{
  copy_vec(y, y_obs, N_observations);
  copy_vec(x0, x_init, Nx);
  ll_sigma = ll_std;
  copy_vec(prop_sigma, prop_std, 2);
  dt = dt;
  N_pop = N_pop;
}

    //Calculates the next state and likelihood for that state
    template <typename PRNG_Generator>
    void advance(PRNG_Generator& rng, const size_t &lTime, float* X, const float *param)
    {
    static constexpr size_t Nx = 3;
    float alpha = param[0];
    float beta = param[1];

    float p_I = 1 - exp(-beta*X[1] / N_pop * dt);
    float p_R = 1 - exp(-alpha * dt);

    float K_SI;
    float K_IR;

    K_SI = BinomialSample(rng, (uint)X[0], p_I);
    K_IR = BinomialSample(rng, (uint)X[1], p_R);
    float delta_x[Nx] = {-K_SI, K_SI - K_IR, K_IR};

    for (int i = 0; i < Nx; i++)
    {
        X[i] += delta_x[i];
    }
    }
    //Update the parameter proposal:
    template <typename PRNG_Generator>
    void proposal_sample(PRNG_Generator& rng, const float* param_old, float* res)
    {
        MultivariateNormalSample<PRNG_Generator, 2>(rng, param_old, prop_sigma, res);
    }
};
#endif