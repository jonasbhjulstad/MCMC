#ifndef CLCPP_MCMC_SAMPLER_CLCPP
#define CLCPP_MCMC_SAMPLER_CLCPP
#include "SMC_Utils.clhpp"
#include "SMC_Particle.clhpp"
#include "SMC_Sampler.clhpp"
namespace MCMC
{

template <typename PRNG_Generator, typename Model>
void metropolis(PRNG_Generator& rng,
Model& model, 
const float* param_prev, 
float* param_current,
float* param_prop,
float& log_sum_weight_prev,
float& log_sum_weight_current,
size_t N_param)
{

    //Did the proposal likelihood improve fit?
    float alpha_prop = exp(log_sum_weight_current - log_sum_weight_prev);
    float alpha_Metropolis = (1 < alpha_prop) ? 1 : alpha_prop;

    size_t accept=0;
    //Accept the proposal
    if (UniformSample(rng) < alpha_Metropolis)
    {
        copy_vec(param_current, param_prop, N_param);
        accept++;
    }
    //Reject the proposal
    else{
        log_sum_weight_current = log_sum_weight_prev;
        copy_vec(param_current, param_prev, N_param);
    }

    //Draw new proposal sample
    model.proposal_sample(rng, param_current, param_prop);

    //Ensure that parameters are positive by running abs(param_prop)
    for (int k = 0; k < N_param; k++)
    {
        param_prop[k] = abs(param_prop[k]);
    }

}   

template <typename PRNG_Generator, typename Model, size_t Nx, size_t N_param>
void advance(PRNG_Generator& rng, 
                Model& model,
                SMC::SMC_Particle<Nx>* particles, 
                float* param_prev,
                float* param_current,
                float* param_prop, 
                float& log_sum_weight_prev,
                float& log_sum_weight_current,
                size_t Nt,
                size_t N_particles,
                float resample_threshold)
{
    float average_log_weight = 0;
    for (size_t t = 0; t < Nt; t++)
    {
        SMC::advance<PRNG_Generator, Model, Nx>(rng, model, average_log_weight, particles, param_prop, N_particles, resample_threshold, t);
    }
    
    metropolis<PRNG_Generator, Model>(rng, model, param_prev, param_current, param_prop, log_sum_weight_prev, log_sum_weight_current, N_param);

    SMC::reset_particles<Model, Nx>(model, particles, N_particles);
}

}

#endif