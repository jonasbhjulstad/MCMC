#include "MCMC_Sampler.hpp"

namespace MCMC
{

template <typename PRNG_Generator, typename Model, size_t N_param>
void mcmc_advance(PRNG_Generator& rng, 
                Model& model,
                SMC_Particle* particles, 
                float* param_prev,
                float* param_current 
                float* param_prop, 
                float* log_sum_weight_prev,
                float* log_sum_weight_current)
{
    float average_log_weight = 0;
    for (size_t t = 0; t < Nt; t++)
    {
        SMC::smc_advance(average_log_weight)
    }
    
    float param_prev[N_param];
    copy_vec(param_prev, param_prop, N_param);
    
    metropolis<PRNG_Generator, Model, N_param>(rng, model, );
    
    float* param_prev, 
float* param_current,
float* param_prop,
float& log_sum_weight_prev,
float& log_sum_weight_current)
    
    SMC::reset_particles(model, particles);
}

template <typename PRNG_Generator, typename Model, size_t N_param>
void metropolis(PRNG_Generator& rng,
Model& model, 
const float* param_prev, 
float* param_current,
float* param_prop,
float& log_sum_weight_prev,
float& log_sum_weight_current)
{

    //Did the proposal likelihood improve fit?
    float alpha_prop = exp(log_sum_weight_current - log_sum_weight_prev);
    float alpha_Metropolis = (1 < alpha_prop) ? 1 : alpha_prop;

    size_t accept=0;
    //Accept the proposal
    if (UniformSample(rng) < alpha_Metropolis)
    {
        log_sum_weight_current = ll_prop;
        assign_vec(param_current, param_prop, N_param);
        accept++;
    }
    //Reject the proposal
    else{
        log_sum_weight_current = ll_prev;
        assign_vec(param_current, param_prev, N_param);
    }

    //Draw new proposal sample
    m_Model->proposal_sample(param_current, param_prop);

    //Ensure that parameters are positive by running abs(param_prop)
    for (int k = 0; k < N_param; k++)
    {
        param_prop[k] = abs(param_prop[k]);
    }

}   
}