#ifndef MCMC_EPIDEMIOLOGICAL_CLCPP
#define MCMC_EPIDEMIOLOGICAL_CLCPP
#include <PRNG_Distributions.clhpp>
#include "SMC_Utils.clhpp"
#include "MCMC_Sampler.clcpp"
#include "SIR_Stochastic.clhpp"
#ifndef PRNG_GENERATOR
#define PRNG_GENERATOR PRNG_ISAAC
#endif



__kernel void SIR_compute(constant ulong* seed,
                        constant float* x_init, 
                        constant float* y_obs, 
                        constant float* param_init,
                        float dt,
                        float N_pop,
                        constant float* prop_std,
                        float ll_std,
                        float nu_I_init,
                        float nu_R_init,
                        float resample_threshold,
                        global float* param_res,
                        global float* log_sum_weight_res)
{
    typedef SIR_Model<N_OBSERVATIONS> Model;
    constexpr size_t N_param = 2;
    constexpr size_t Nx = 2;
    size_t gID = get_global_id(0);
    PRNG_GENERATOR rng(seed[gID]);
    float param[N_param*(N_MCMC_ITERATIONS+1)];
    float param_prop[N_param];
    float log_sum_weights[N_MCMC_ITERATIONS+1];
    copy_vec(param, param_init, N_param);


    Model model(N_MCMC_ITERATIONS, y_obs, 
    x_init, dt, N_pop, prop_std, ll_std, nu_I_init, nu_R_init);

    SMC::SMC_Particle<Nx> particles[N_PARTICLES];

    for (size_t i = 0; i < N_MCMC_ITERATIONS; i++)
    {
        float* param_prev = &param[i*N_param];
        float* param_current = &param[(i+1)*N_param];
        float& log_sum_weight_prev = log_sum_weights[i];
        float& log_sum_weight_current = log_sum_weights[i+1];
        MCMC::advance<PRNG_GENERATOR,Model, Nx, N_param>(rng, model, particles, param_prev, param_current, param_prop, log_sum_weight_prev, log_sum_weight_current, N_OBSERVATIONS, N_PARTICLES, resample_threshold);
    }

    copy_vec(&param_res[(N_param*N_MCMC_ITERATIONS+1)*gID], param, N_param*(N_MCMC_ITERATIONS+1));
    copy_vec(&log_sum_weight_res[(N_MCMC_ITERATIONS+1)*gID], log_sum_weights, N_MCMC_ITERATIONS+1);
}



#endif