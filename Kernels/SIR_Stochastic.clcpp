#include "SIR_Stochastic.hpp"

using namespace std;

SIR_Model::SIR_Model(constant float *y_obs, constant float *x_init, float DT, float Npop, float* prop_std, float llsigma)
{
  y = float[Ny];
  copy_vec(y, y_obs, Ny);
  copy_vec(x0, x_init, Nx);
  ll_sigma = llsigma;
  copy_vec(prop_sigma, prop_std, 2);
  dt = DT;
  N_pop = Npop;
}

void SIR_Model::set_dispersion_parameters(const float &nu_I_init, const float &nu_R_init){
  nu_I = nu_I_init; 
  nu_R = nu_R_init;
  is_dispersed = 1;
}




//Calculates the next state and likelihood for that state
void SIR_Model::Step(const long &lTime, float* X, const float *param)
{
  static constexpr size_t Nx = 3;
  float alpha = param[0];
  float beta = param[1];

  float p_I = 1 - exp(-beta*X[1] / N_pop * dt);
  float p_R = 1 - exp(-alpha * dt);

  float K_SI;
  float K_IR;

  K_SI = BinomialSample(rng, p_I, (uint)X[0]);
  K_IR = BinomialSample(rng, p_R, (uint)X[1]);
  float delta_x[Nx] = {-K_SI, K_SI - K_IR, K_IR};

  for (int i = 0; i < Nx; i++)
  {
    X[i] += delta_x[i];
  }
}

float SIR_Model::LogLikelihood(const float* X, const long &lTime)
{
  return log_normal_pdf(X[1], y[lTime], ll_sigma);
}
