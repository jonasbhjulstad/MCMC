#ifndef SMC_MODEL_CLHPP
#define SMC_MODEL_CLHPP
#include "SMC_Utils.clhpp"
namespace SMC{

template <typename Derived>
struct Model
{
    //Should integrate the state & update particle weight
    template <typename PRNG_Generator>
    void advance(PRNG_Generator& rng, const long &lTime, float* X, const float *param)
    {
        static_cast<Derived*>(this)->advance(rng, lTime, X, param);
    }

    //Update the parameter proposal:
    void proposal_sample(const float* param_prop, float* res)
    {
        static_cast<Derived*>(this)->proposal_sample(param_prop, res);
    }
    //Likelihood required for particle weight updates
    float log_likelihood(const float *state, const size_t &N)
    {
        return static_cast<Derived*>(this)->log_likelihood(state, N);
    }
    void reset(float* state)
    {
        static_cast<Derived*>(this)->reset(state);
    }
};
}


#endif