#ifndef DECOMPOSITIONS_CLCPP
#define DECOMPOSITIONS_CLCPP

//create matrix vector multiply function
void matrix_multiply_lower(float* A, float* x, float* res, size_t N)
{
    for(size_t i = 0; i < N; i++)
    {
        res[i] = 0;
        for(size_t j = 0; j < i; j++)
        {
            res[i] += A[i*N+j]*x[j];
        }
    }
}
//Compute cholesky decomposition
void cholesky(float* A, float* L, size_t N)
{
for (size_t i = 0; i < N; i++) {
    for (size_t j = 0; j <= i; j++) {
        float sum = 0;
        for (size_t k = 0; k < j; k++)
        {
            sum += L[i][k] * L[j][k];
        }
        if (i == j)
        {
            L[i][j] = sqrt(A[i][i] - sum);
        }
        else
        {
            L[i][j] = (1.0 / L[j][j] * (A[i][j] - sum));
        }
    }
}
}

template <size_t N>
void cholesky_solve(float* A, float* x, float* res)
{
    float* L[N*N];
    cholesky(A, L, N);
    matrix_vector_multiply(L, x, res, N);
}


#endif