set(ENABLE_TESTING ON)
cmake_minimum_required(VERSION 3.5)
project(Sycl_MCMC)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_C_COMPILER_FORCED ON)

list(APPEND CMAKE_MODULE_PATH "/home/arch/Downloads/cmake-checks-cache/CMakeChecksCache/")
set(PYBIND11_PYTHON_VERSION "3.9")
find_package(pybind11 CONFIG)
find_package(Python3 3.9 REQUIRED)
option(SYCL_MCMC_USE_CUDA "Use CUDA" ON)
set(SYCL_CUDA_TARGET "")
option(SYCL_MCMC_USE_INTEL "Use Intel" OFF)
option(SYCL_MCMC_USE_HIPSYCL "Use HIPSYCL" OFF)
option(SYCL_MCMC_USE_ONEAPI "Use OneAPI" OFF)
option(DEFAULT_WARNING_SUPPRESSION "Default Warning Suppression" ON)
option(TRACY_ENABLE "" ON)
option (TRACY_ON_DEMAND "" ON)

include(cmake/Cuda_config.cmake)
include(cmake/external_packages.cmake)
include(cmake/custom_executable.cmake)
add_compile_options("-fsycl")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(DPCPP_FLAGS -fsycl -fsycl-targets=spir64_x86_64,nvptx64-nvidia-cuda -Xcuda-ptxas -v -Xsycl-target-backend=nvptx64-nvidia-cuda --cuda-gpu-arch=sm_60 -Wno-linker-warnings)

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_options("-stdlib=libstdc++")
endif()


set(SYCL_MCMC_DATA_DIR "${PROJECT_SOURCE_DIR}/data" CACHE INTERNAL "SYCL_MCMC_DATA_DIR")
set(SYCL_MCMC_LOG_DIR "${PROJECT_SOURCE_DIR}/log" CACHE INTERNAL "SYCL_MCMC_LOG_DIR")
set(SYCL_MCMC_INCLUDE "${PROJECT_SOURCE_DIR}/include" CACHE INTERNAL "SYCL_MCMC_INCLUDE")
set(SYCL_MCMC_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include;${SYCL_HEADER_INCLUDE_DIR}" CACHE INTERNAL "SYCL_MCMC_INCLUDE_DIRS")
file(MAKE_DIRECTORY ${SYCL_MCMC_DATA_DIR}/SIR_sim)

include_directories(${SYCL_INCLUDE_DIR})
add_subdirectory(include)
set(SYCL_MCMC_LIBRARIES ${LIBRARIES} DataFrame Eigen3::Eigen)
configure_file("${PROJECT_SOURCE_DIR}/include/Sycl_MCMC/path_config.hpp.in" "${PROJECT_SOURCE_DIR}/include/Sycl_MCMC/path_config.hpp")
# configure_file("${PROJECT_SOURCE_DIR}/include/SYCL_MCMC/path_config.py.in" "${PROJECT_SOURCE_DIR}/include/SYCL_MCMC/path_config.py")
add_subdirectory(test)
add_subdirectory(Executables)